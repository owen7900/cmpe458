Phase 2:

Parser.ssl:
- Update input tokens to match scan.ssl. (lines 20-94)
- Removed old keywords: sRepeatStmt, sRepeatEnd. (lines 132-133)
- Added Quby keywords: sPublic, sModule, sDoStmt, sBreakIf, sSubstring, sLength, sIndex. (lines 111-154)
- Changed main parser loop to allow declarations and statements to be intermixed. (lines 212-226)
- Modified parsing of constant, type and variable declarations. (lines 234-340)
- Changed procedures. (lines 196-207 and 344-392)
- Added parsing of modules. (lines 208-211)
- Updated If Statements and implemented elsif. (lines 478-487)
- Added Unless Statements to make them work like if not. (lines 492-505)
- Modified Case Statements. (lines 511-554)
- Implemented Do Statements. (lines 577-582)
- Modified handling of the String type. (lines 625-662)
- Modified assignment, compare and not sign. (lines 414, 425, 587, 589 and 657)

Parser.pt:
- Copied contents from parser.def to the corresponding section. (lines 190-352)

Testing:
- Created folders for each phase and moved the old tests to the relative folder.
- Added new tests to Phase2Tests folder.
- RunTests.bash automates the process.
- Testing documentation is located in test/Phase2Tests/TestingDocumentation.txt.


------------------------------------------------------------------------------------------------------------------------------
Phase 1:

Changes to the stdIdentifiers file:
    Changes made to this file include the removal of PT keywords "not," "unitl," "program," "const,"
    "procedure," "being," and "repeat." this was due to the fact that the Quby language does not use any of the keywords
    listed above. Then the required Quby keywords were added "elsif," "unless," "break," "module," "using," "val," 
    "when," and "def." These were added as Quby uses them and they must be recognizable by the compiler. The final change
    that was made was with respect to the predeclared type names, specifically "char" was replaced by "string," as that is
    the type that Quby will be using.

Changes ot Scan.ssl file:
    THe first changes made to the file was with respect to the input character classes. '%', '$', '#', '?', and '!' 
    were all added with their respective names as inputs for the scan file. The next step was to remove the Output keywords
    for the PT specific code and replace it with the Quby specific ones. This consisted of removing "pNot," "pUntil," 
    "pProgram," "pConst," "pProcedure," "pBegin," and "pRepeat" and adding "pElsIf," "pUnless," "pBreak," "pModule," 
    "pUsing," "pVal," "pWhen," and "pDef". The last step was to also replace the identification for "lastKeywordToken"
    with pDef instead of pRepeat. lastKeywordToken = pRepeat -> lastKeywordToken = pDef. The next step was to add 
    the non compound tokens for pAssignment replacing pColonEquals, as well as pLeftBrace, pRightBrace, pSubStr,
    pStrLen, pStrIdx, and pNot.

    the next step was to remove the possibility for an alternate comment that PT supported, this was also reflected at the 
    bottom of the scan.ssl file where the entire 'AlternateComment' section was removed. On lines 172-177 the '%', '$', 
    '#', '?', and '!' select statements were added along with their respective outputs. line 191 to 196 changes were made
    to allow for the quby =* and == logic. The '>' operator was removed as well as Quby doesn't use that logic and on lines 
    224-235 the != and !* operators were added along with logic to understand the left and right braces.

    In the StringLiteral call the logic to understand a quote followed by * was removed as it is not part of the Quby
    language. And finally the Comment call was modified to function specifically with the Quby comment syntax without the 
    right brace syntax of PT.

Changes to the Parser.pt file:
    The content in scan.def generated by running "ssl scan.ssl" was copied to replace the original relative content.

Test Suites:
    Test suites are contained in the test folder. The example tests were moved to a new folder called old_tests.

    The test suites .pt files that contains unit tests that are named after the tests to each specific changes that were made.

    The .test files are actual tests to test the .pt files to behave with certain expected traits, such as having a specific number of tokens.
    All the tests are expected to output "SUCCESS".

    Finally, the RunTests.bash automates the process of running all the .test files.