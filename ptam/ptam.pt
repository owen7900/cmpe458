{  PT Abstract Machine Version 5.1

   Date: 4 August 2009 
         (Revised v5.1 - 8 Feb 2021)

   Author: J.R. Cordy, Queen's University

   Abstract:
      This is a new microprogrammed implementation of the PT Abstract Machine,
      as described in J. Alan Rosselet, "PT: A Pascal Subset", Tech Report CSRI-119,
      Computer Systems Research Institute, University of Toronto, Sept 1980.

   Input Files:
        input:       User input
        ptamSsl:     S/SL table generator from ptam.ssl
        tCode:       TCode instructions generated by the semantic analysis
                         pass for the source program.
        options:     Compiler options

   Output Files:
        output:      User output and diagnostic messages
}


program PTAM (input, output, ptamSsl, tCode, options);

    const

{ ===== Pasted contents of ptam.def, generated by S/SL from ptam.ssl -
        defines Semantic Operations, Input/Output Tokens, Error Codes and Semantic Types }

        { Semantic Operations }
        oMemoryLoadCode = 14;
        oMemoryFetchInstruction = 15;
        oMemoryFetchOperand = 16;
        oMemoryFetch = 17;
        oMemoryStore = 18;
        oALUpop = 19;
        oALUpushTrap = 20; { (15) }
        oALUpushL = 21;
        oALUpushR = 22;
        oALUpopL = 23;
        oALUpopR = 24;
        oALUchooseR = 25; { >>13 }
        oALUpushLplusR = 26;
        oALUpushLminusR = 27;
        oALUpushLtimesR = 28;
        oALUpushLdivR = 29;
        oALUpushLmodR = 30;
        oALUpushLeqR = 31;
        oALUpushLneR = 32;
        oALUpushLgtR = 33;
        oALUpushLgeR = 34;
        oALUpushLltR = 35;
        oALUpushLleR = 36;
        oALUpushLandR = 37;
        oALUpushLorR = 38;
        oALUpushNotR = 39;
        oALUpushNegateR = 40;
        oALUpushChrR = 41;
        oALUpushOrdR = 42;
        oCUchooseInstruction = 43; { >>14 }
        oCUzeroPC = 44;
        oCUmoveMDRtoL = 45;
        oCUmoveMDRtoR = 46;
        oCUmoveMDRtoT = 47;
        oCUmoveMDRtoZ = 48;
        oCUmoveMDRtoIR = 49;
        oCUmoveMDRtoPC = 50;
        oCUmoveMDRtoSCR = 51;
        oCUmoveLtoMDR = 52;
        oCUmoveRtoMAR = 53;
        oCUmovePCtoMAR = 54;
        oCUmoveMARtoPC = 55;
        oCUincPC = 56;
        oCUpushPC = 57;
        oCUpopPC = 58;
        oCUcase = 59;
        oCUsubscriptCheck = 60;
        oTrapHandlerTrap = 61; { >>13 }

        { Input Tokens }

        { Output Tokens }

        { Input/Output Tokens }

        { Error Codes }

        { Type Values }
        { Type 13 }
        bFALSE = 0;
        bTRUE = 1;
        { Type 14 }
        tMultiply = 0;
        firstTcode = 0;
        tDivide = 1;
        tModulus = 2;
        tAdd = 3;
        tSubtract = 4;
        tEQ = 5;
        tNE = 6;
        tGT = 7;
        tGE = 8;
        tLT = 9;
        tLE = 10;
        tAnd = 11;
        tInfixAnd = 12;
        tOr = 13;
        tInfixOr = 14;
        tNegate = 15;
        tNot = 16;
        tChr = 17;
        tOrd = 18;
        tEoln = 19;
        tEOF = 20;
        tVarParm = 21;
        tFetchAddress = 22;
        tFetchInteger = 23;
        tFetchChar = 24;
        tFetchBoolean = 25;
        tAssignBegin = 26;
        tAssignAddress = 27;
        tAssignInteger = 28;
        tAssignChar = 29;
        tAssignBoolean = 30;
        tStoreAddress = 31;
        tStoreInteger = 32;
        tStoreChar = 33;
        tStoreBoolean = 34;
        tSubscriptBegin = 35;
        tSubscriptAddress = 36;
        tSubscriptInteger = 37;
        tSubscriptChar = 38;
        tSubscriptBoolean = 39;
        tArrayDescriptor = 40;
        tFileDescriptor = 41;
        tFileBind = 42;
        tIfBegin = 43;
        tIfEnd = 44;
        tCaseBegin = 45;
        tWhileBegin = 46;
        tRepeatBegin = 47;
        tRepeatControl = 48;
        tCallBegin = 49;
        tParmEnd = 50;
        tProcedureEnd = 51;
        tWriteBegin = 52;
        tReadBegin = 53;
        tTrapBegin = 54;
        tWriteEnd = 55;
        tReadEnd = 56;
        tLiteralAddress = 57;
        firstCompoundTcode = 57;
        tLiteralInteger = 58;
        tLiteralChar = 59;
        tLiteralBoolean = 60;
        tSkipString = 61;
        tStringData = 62;
        tLiteralString = 63;
        tIfThen = 64;
        tIfMerge = 65;
        tCaseSelect = 66;
        tCaseMerge = 67;
        tCaseEnd = 68;
        tWhileTest = 69;
        tWhileEnd = 70;
        tRepeatTest = 71;
        tSkipProc = 72;
        tCallEnd = 73;
        tLineNumber = 74;
        tTrap = 75;
        lastCompoundTcode = 75;
        tEndOfFile = 76;
        lastTcode = 76;
        { Type 15 }
        trHalt = 0;
        trReset = 1;
        trRewrite = 2;
        trRead = 3;
        trReadln = 4;
        trWrite = 5;
        trWriteln = 6;
        trWriteString = 7;
        trWriteInteger = 8;
        trWriteChar = 9;
        trReadInteger = 10;
        trReadChar = 11;
        trAssign = 12;
        trSubscriptAbort = 13;
        trCaseAbort = 14;
        trEoln = 15;
        trEof = 16;
        trFileBind = 17;

        { S/SL Rule Table Addresses } {
        PTmachine = 0;
        }

        { S/SL Table Parameters }
        sslTblSize = 542;
        minSslTableValue = -32767;
        maxSslTableValue = 32767;

{ ===== End of contents of ptam.def }

        { Input tokens - none for this program, so these are just placeholders. }
        firstInputToken = 0;
        firstCompoundToken = 1;
        lastCompoundToken = 0;
        lastInputToken = 0;

        { S/SL table operations }
	firstTableOperation = 0;
	lastTableOperation = 120;

        { Primitive operations }
        oCall = 0;
        oReturn = 1;
        oRuleEnd = 2;
        oJumpBack = 3;
        oJumpForward = 4;
        oInput = 5;
        oInputAny = 6;
        oInputChoice = 7;
        oEmit = 8;
        oError = 9;
        oChoice = 10;
        oChoiceEnd = 11;
        oSetParameter = 12;
        oSetResult = 13;

        { Error Codes }
        firstErrorCode = 10;
        firstFatalError = 21;
        eSubscriptError = 21;
        eCaseError = 22;
        eSslStackOvfl = 24;
        lastErrorCode = 24;

        { S/SL System Failure Codes }
        firstFailureCode = 0;
        fSemanticChoiceFailed = 0;
        fChoiceRuleFailed = 1;
        lastFailureCode = 1;

        { PT Abstract Machine Limits }
        sslTableSize = 5000;
        maxInteger = 32767;
        minInteger = -32767;
        sslStackSize = 100;
        codeMemorySize = 50000;
        dataMemorySize = 500000;
        expnStackSize = 80;
        returnStackSize = 250;
        maxLineNumber = 9999;

        { Machine word size }
        wordSize = 4;           

        { Misc }
        undefined = minInteger;

        { Assertion identification values }
        assert1 = 1;
        assert2 = 2;
        assert3 = 3;
        assert4 = 4;
        assert5 = 5;
        assert6 = 6;
        assert7 = 7;
        assert8 = 8;
        assert9 = 9;
        assert10 = 10;
        assert11 = 11;
        assert12 = 12;
        assert13 = 13;
        assert14 = 14;
        assert15 = 15;
        assert16 = 16;
        assert17 = 17;
        assert18 = 18;
        assert19 = 19;
        assert20 = 20;
        assert21 = 21;
        assert22 = 22;
        assert23 = 23;
        assert24 = 24;
        assert25 = 25;
        assert26 = 26;
        assert27 = 27;
        assert28 = 28;
        assert29 = 29;
        assert30 = 30;
        assert31 = 31;
        assert32 = 32;
        assert33 = 33;
        assert34 = 34;

    type
        InputTokens = firstInputToken .. lastInputToken;
        ErrorCodes = firstErrorCode .. lastErrorCode;
        FailureCodes = firstFailureCode .. lastFailureCode;

    var 
        { The Syntax/Semantic Table;
          The S/SL table file produced by the S/SL Processor 
          for the pass is read into this array during initialization. }
        sslTable: array [0 .. sslTableSize] of integer;
        ptamSsl:  file of integer;

        { Table Walker State }
        processing: Boolean             { initially true };
        sslPointer: 0 .. sslTableSize   { initially 0 };
        operation: firstTableOperation .. lastTableOperation;

        { Tracing Control }
        options: text;
        tracing: Boolean        { initially false };

        { Abort flag }
        sslabort: Boolean       { initially false };

        { The S/SL Rule Call Stack:
          The Rule Call Stack implements Syntax/Semantic Language rule call and return.
          Each time an oCall operation is executed, the table return address is pushed onto the
          Rule Call Stack.  When an oReturn is executed, the return address is popped from 
          the stack.  An oReturn executed when the Rule Call Stack is empty terminates table 
          execution. }
        sslStack:    array [1 .. sslStackSize] of 0 .. sslTableSize;
        sslStackTop: 0 .. sslStackSize  { initially 0 };

        { Choice Match Flag:
          Set by the Choice Handler to indicate whether a match was made or the otherwise path 
          was taken.  Set to true if a match was made and false otherwise.
          This flag is used in input choices to indicate whether the choice input token 
          should be accepted or not. }
        choiceTagMatched: Boolean;

        { Parameterized And Choice Semantic Operation Values:
          These are used to hold the decoded parameter value to a parameterized semantic operation 
          and the result value returned by a choice semantic operation or rule respectively. }
        parameterValue: integer;
        resultValue:    integer;

        { Line Counters }
        nextLineNumber: 0 .. maxLineNumber      { initially 0 };
        lineNumber: 0 .. maxLineNumber;
        lastEmittedLineNumber:  integer;

        { Error Counter }
        noErrors: integer  { initially 0 };

        { Input Interface }
        nextInputToken: InputTokens;
        tCode: file of integer;

        { Output Interface }

        { Global temporaries }
        i: integer;

        { Memory Mechanism }
        codeMemory: array [0 .. codeMemorySize] of integer;
        dataMemory: array [0 .. dataMemorySize] of integer;
        dataAreaSize: integer;
        MAR: integer;
        MDR: integer;

        { Expression Stack }
        expnStack: array [0 .. expnStackSize] of integer;
        expnSP:    integer;

        { Return Stack }
        returnStack: array [0 .. returnStackSize] of integer;
        returnSP:    integer;

        { ALU }
        L: integer;
        R: integer;
        Z: integer;

        { CU }
        IR:  integer;
        PC:  integer;
        T:   integer;
        SCR: integer;

        { Trap Handler - User I/O Files }

        { UNIX argument file identifiers, for gpc compatibility }
        {==
        NptamSsl, NtCode, Noptions: array [1 .. 50] of char;
        ==}


    procedure Assert (assertion: Boolean; number: integer);
        { Procedure to implement programmer assertion checking with identification numbers. }
        begin
            if not assertion then
                begin
                    write ('### PTAM Assertion ', number: 1, ' failed: ');

                    case number of
                        assert1, assert2, assert3, assert4, assert5, assert6:
                            ; { Unused }
                        assert7, assert9:
                            write ('internal error in ptam.pt (report to maintainer)');
                        assert8:
                            ; { Problem message already reported }
                        assert10, assert11, assert12, assert13, assert14, assert15, 
                        assert16, assert17, assert18, assert19, assert20, assert21, assert22:
                            ; { Unused }
                        assert23:
                            write ('sslTableSize too small (increase in ptam.pt)');
                        assert24:
                            ; { Unused }
                        assert25:
                            write ('ptam phase ended without consuming all of tCode token stream');
                        assert26:
                            write ('expression stack not empty at end of ptam phase');
                        assert27:
                            write ('return stack not empty at end of ptam phase');
                        assert28, assert29, assert30:
                            ; { Unused }
                        assert31:
                            write ('empty expression stack in oALUpop');
                        assert32:
                            write ('expression stack overflow in oALUpush');
                        assert33:
                            write ('empty return stack in oCUreturnPop');
                        assert34:
                            write ('return stack overflow in oCUreturnPush');
                    end;

                    writeln;
                    lineNumber := SCR;
                    write ('while processing line ', lineNumber);
                    writeln;

                    processing := false;
                    sslabort := true;
                end;
        end { Assert };

    procedure SubscriptError (subscript: integer;
                             lowerBound: integer;
                             upperBound: integer);
        { Report a subscript out of bounds. }
        begin
            lineNumber := SCR;
            write ('line ', lineNumber: 1, ': subscript [', subscript: 1, '] out of bounds [', 
                lowerBound: 1, ' .. ', upperBound: 1, ']');
            writeln;
            noErrors := noErrors + 1;
	    processing := false;  { terminate coding }
	    sslabort := true;
        end { SubscriptError };

    procedure Error (errorCode: ErrorCodes);
        { Report an error and abort processing if the error was fatal. }
        begin
            lineNumber := SCR;
            write ('line ', lineNumber: 1, ': ');
            case errorCode of
                eCaseError: write ('case expression out of range');
		eSslStackOvfl: write ('program too complicated (SSL stack)');
            end;
            writeln;
            noErrors := noErrors + 1;
            if errorCode >= firstFatalError then
                begin
                    processing := false;  { terminate coding }
                    sslabort := true;
                end;
        end { Error };

    procedure Initialize;                               
        { Set the compiler options from the options file, read in the S/SL table corresponding 
          to coder.ssl, initialize the coder semantic mechanisms. }

        var
            i: integer;
            c: char;

        begin
            { UNIX argument file identifiers, for gpc compatibility }
            {==
            argv (1, NptamSsl);
            argv (2, NtCode);
            argv (3, Noptions);
            ==}

            { Trace Execution if Required }
            tracing := false;
            reset (options {==, Noptions==} );

            while not eof (options) do
                begin
                    read (options, c);
                    if c = 't' then
                        begin
                            read (options, c);
                            if (c = '4') then
                                tracing := true
                        end;
                end;

            { Initialize the coder ssl table }
            reset (ptamSsl {==, NptamSsl==} );
            i := 0;
            while not eof (ptamSsl) do
                begin
                    if i > sslTableSize then
                        Assert (false, assert23);
                    read (ptamSsl, sslTable[i]);
                    i := i + 1
                end;

            { Initialize Input/Output }
            reset (tCode {==, NtCode==} );

            { Initialize semantic mechanisms }
            PC := 0;
            SCR := 0;
            expnSP := 0;
            returnSP := 0;

            { Discard the error count word, the ptc command file has already
              checked it and aborted compilation if semantic errors were found.}
            read (tCode, i);

            read (tCode, dataAreaSize);
            { Round the data area size up to a word (VAX 4 byte) boundary }
            dataAreaSize := dataAreaSize + dataAreaSize mod wordSize;

            read (tCode, i);    { tCode size }

        end { Initialize };


    { Procedures to implement the PTAM semantic mechanisms. }

    procedure ALUpush (value: integer);
        begin
            Assert (expnSP < expnStackSize, assert32);
            expnSP := expnSP + 1;
            expnStack[expnSP] := value;
        end;

    procedure ALUpop (var result: integer);
        begin
            Assert (expnSP > 0, assert31);
            result := expnStack[expnSP];
            expnSP := expnSP - 1;
        end;

    procedure CUreturnPush (value: integer);
        begin
            Assert (returnSP < returnStackSize, assert34);
            returnSP := returnSP + 1;
            returnStack[returnSP] := value;
        end;

    procedure CUreturnPop (var result: integer);
        begin
            Assert (returnSP > 0, assert33);
            result := returnStack[returnSP];
            returnSP := returnSP - 1;
        end;

    procedure CUcase;
        var lowerBound : integer;
            upperBound : integer;
        begin
	    { L = case table address, R = subscript }
            lowerBound := codeMemory[L];
	    upperBound := codeMemory[L+1];
            if (R >= lowerBound) and (R <= upperBound) then
                PC := codeMemory[L + 2 + R - lowerBound]
	    else
		PC := -1;
	    if PC = -1 then
		Error (eCaseError);
        end;

    procedure CUsubscriptCheck;
        var lowerBound : integer;
            upperBound : integer;
        begin
	    { L = array descriptor address, R = subscript }
            lowerBound := dataMemory[L];
	    upperBound := dataMemory[L+4];
            if (R < lowerBound) or (R > upperBound) then
		SubscriptError (R, lowerBound, upperBound);
	    { Data follows the descriptor }
	    L := L + 8;
        end;

    procedure MemoryLoadCode;
        var
            tAddress: integer;
        begin
            tAddress := 0;
            while (not eof (tCode)) do
            begin
                read (tCode, codeMemory[tAddress]);
                tAddress := tAddress + 1;
            end;
        end;

    procedure TrapHandlerTrap (trap: integer);

        var
            fdaddress:  integer;
            fdtextfile: text;
            fdbinfile:  file of integer;
            fdfilename: array [1 .. 256] of char;
            fdnumber: integer;
            length:   integer;
            address:  integer;
            value:    integer;
            charvalue: char;
            j: integer;

        begin
            case trap of

                trHalt:
                    ;

                trReset: 
                    begin
                        ALUpop (fdaddress);
                        fdtextfile := file (dataMemory[fdaddress]);
                        reset (fdtextfile);
                    end;
                    
                trRewrite: 
                    begin
                        ALUpop (fdaddress);
                        fdtextfile := file (dataMemory[fdaddress]);
                        rewrite (fdtextfile);
                    end;

                trWrite: 
                    begin
                        ALUpop (length);
                        ALUpop (value);
                        ALUpop (fdaddress);
                        fdbinfile := file (dataMemory[fdaddress]);
                        write (fdbinfile, value);
                    end;

                trWriteln:
                    begin
                        ALUpop (fdaddress);
                        fdtextfile := file (dataMemory[fdaddress]);
                        writeln (fdtextfile);
                    end;

                trWriteString: 
                    begin
                        ALUpop (length);
                        ALUpop (address);
                        ALUpop (fdaddress);
                        fdtextfile := file (dataMemory[fdaddress]);

                        if address < 0 then 
                            begin
                                { string literal data in code memory }
                                address := -address;
                                j := 0;
                                while (j < length) and (codeMemory[address + j] <> 0) do
                                    begin
                                        write (fdtextfile, chr (codeMemory[address + j]));
                                        j := j + 1;
                                    end;
                            end
                        else
                            begin
                                { char array }
                                j := 0;
                                while (j < 255) and (dataMemory[address + j] <> 0) do
                                    begin
                                        write (fdtextfile, chr (dataMemory[address + j]));
                                        j := j + 1;
                                    end;
                            end;
                    end;

                trWriteInteger: 
                    begin
                        ALUpop (length);
                        ALUpop (value);
                        ALUpop (fdaddress);
                        fdtextfile := file (dataMemory[fdaddress]);
                        write (fdtextfile, value : length);
                    end;

                trWriteChar: 
                    begin
                        ALUpop (length);
                        ALUpop (value);
                        ALUpop (fdaddress);
                        fdtextfile := file (dataMemory[fdaddress]);
                        write (fdtextfile, chr (value) : length);
                    end;

                trRead: 
                    begin
                        ALUpop (length);
                        ALUpop (address);
                        ALUpop (fdaddress);
                        fdbinfile := file (dataMemory[fdaddress]);
                        read (fdbinfile, dataMemory[address]);
                    end;

                trReadln: 
                    begin
                        ALUpop (fdaddress);
                        fdtextfile := file (dataMemory[fdaddress]);
                        readln (fdtextfile);
                    end;

                trReadInteger: 
                    begin
                        ALUpop (address);
                        ALUpop (fdaddress);
                        fdtextfile := file (dataMemory[fdaddress]);
                        read (fdtextfile, dataMemory[address]);
                    end;

                trReadChar:
                    begin
                        ALUpop (address);
                        ALUpop (fdaddress);
                        fdtextfile := file (dataMemory[fdaddress]);
                        read (fdtextfile, charvalue);
                        dataMemory[address] := ord (charvalue);
                    end;

                trAssign:
                    begin
                        ALUpop (length);
                        ALUpop (address);
                        ALUpop (fdaddress);
                        fdtextfile := file (dataMemory[fdaddress]);

                        if address < 0 then 
                            begin
                                { string literal data in code memory }
                                address := -address;
                                j := 0;
                                while (j < length) and (codeMemory[address + j] <> 0) do
                                    begin
                                        fdfilename[j+1] := chr (codeMemory[address + j]);
                                        j := j + 1;
                                    end;
                                fdfilename[j+1] := chr (0);
                            end
                        else
                            begin
                                { char array }
                                j := 0;
                                while (j < 255) and (dataMemory[address + j] <> 0) do
                                    begin
                                        fdfilename[j+1] := chr (dataMemory[address + j]);
                                        j := j + 1;
                                    end;
                                fdfilename[j+1] := chr (0);
                            end;

                        fdfilename[j+1] := chr (0);
                        assign (fdtextfile, fdfilename);
                        dataMemory[fdaddress] := file (fdtextfile);
                    end;

                trEoln:
                    begin
                        ALUpop (fdaddress);
                        fdtextfile := file (dataMemory[fdaddress]);
                        if eoln (fdtextfile) then
                            ALUpush (bTRUE)
                        else
                            ALUpush (bFALSE);
                    end;

                trEof:
                    begin
                        ALUpop (fdaddress);
                        fdtextfile := file (dataMemory[fdaddress]);
                        if eof (fdtextfile) then
                            ALUpush (bTRUE)
                        else
                            ALUpush (bFALSE);
                    end;

                trFileBind:
                    begin
                        ALUpop (fdnumber);
                        if fdnumber > 2 then
                            fdnumber := fdnumber + 3;
                        ALUpush (fdnumber);
                    end;

            end {case trap};
        end;

    procedure AcceptInputToken;
        { This procedure provides the interface to the previous pass;  
          it is reponsible for handling all input including line number indicators and
          the values and text associated with input tokens. }
        begin
        end { AcceptInputToken };

    procedure SslSyntaxError;
        { A syntax error can only be the result of an error in the previous pass. }
        begin
            Assert (false, assert7);
        end { SslSyntaxError };

    procedure SslTrace;
        begin
            write ('Table index ', sslPointer-1: 1, ';  Operation ', 
                operation: 1, ';  Argument ', sslTable[sslPointer]: 1);
            writeln;
        end { SslTrace };

    procedure SslFailure (failCode: FailureCodes);
        begin
            lineNumber := SCR;
            write ('### PTAM S/SL program failure: ');

            case failCode of
                fSemanticChoiceFailed:
                    write ('Semantic choice failed');
                fChoiceRuleFailed:
                    write ('Choice rule returned without a value');
            end;

            writeln;
            write ('while processing line ', lineNumber);
            writeln;
            SslTrace;
            Assert (false, assert8);
        end { SslFailure };

    procedure SslChoice (choiceTag: integer);

        { This procedure performs both input and semantic choices.  It sequentially tests 
          each alternative value against the tag value, and when a match is found, 
          performs a branch to the corresponding alternative path.  If none of the alternative
          values matches the tag value, sslTable interpretation proceeds to the operation 
          immediately following the list of alternatives (normally the otherwise path).  
          The flag choiceTagMatched is set to true if a match is found and false otherwise. }

        var
            numberOfChoices: integer;

        begin
            sslPointer := sslPointer + sslTable[sslPointer];
            numberOfChoices := sslTable[sslPointer];
            sslPointer := sslPointer + 1;
            choiceTagMatched := false;

            repeat
                if sslTable[sslPointer] = choiceTag then
                    begin
                        sslPointer := sslPointer + 1;
                        sslPointer := sslPointer - sslTable[sslPointer];
                        choiceTagMatched := true;
                        numberOfChoices := 0;
                    end
                  else
                    begin
                        sslPointer := sslPointer + 2;
                        numberOfChoices := numberOfChoices - 1;
                    end;

            until numberOfChoices = 0;

            if tracing then
                begin
                    write ('Choice tag ', choiceTag : 1);
                    if choiceTagMatched then
                        write (' (matched)')
                    else
                        write (' (not matched)');
                    writeln
                end

        end { SslChoice };


    procedure Interpret;
        { Walk the ssl code generator table. }

        begin
            { Initialize Table Walker State }
            processing := true;
            sslPointer := 0;
            sslStackTop := 0;
            noErrors := 0;
            sslabort := false;
            AcceptInputToken;

            repeat { until processing = false }

                operation := sslTable[sslPointer];
                sslPointer := sslPointer + 1;

                if tracing then
                    SslTrace;

                case operation of

                    oCall:
                        if sslStackTop < sslStackSize then
                            { no allowance for long calls }
                            begin
                                sslStackTop := sslStackTop + 1;
                                sslStack[sslStackTop] := sslPointer + 1;
                                sslPointer := sslTable[sslPointer]
                            end
                          else
                            begin
                                Error (eSslStackOvfl);
                                processing := false
                            end;

                    oReturn:
                        if sslStackTop > 0 then
                            begin
                                sslPointer := sslStack[sslStackTop];
                                sslStackTop := sslStackTop - 1
                            end
                          else
                            processing := false;        { normal return }

                    oRuleEnd:
                        SslFailure (fChoiceRuleFailed);

                    oJumpForward:
                        sslPointer := sslPointer + sslTable[sslPointer];

                    oJumpBack:
                        sslPointer := sslPointer - sslTable[sslPointer];

                    oInput:
                        begin
                            if nextInputToken = sslTable[sslPointer] then
                                AcceptInputToken
                              else
                                SslSyntaxError;
                            sslPointer := sslPointer + 1
                        end;

                    oInputAny:
                        if nextInputToken <> tEndOfFile then
                            AcceptInputToken
                        else
                            { Premature end of file }
                            SslSyntaxError;

                    oInputChoice:
                        begin
                            SslChoice (nextInputToken);
                            if choiceTagMatched then
                                AcceptInputToken
                        end;

                    oEmit:
                        { No emitting operations }
                        Assert (false, assert9);

                    oError:
                        begin
                            Error (sslTable[sslPointer]);
                            sslPointer := sslPointer + 1
                        end;

                    oChoice:
                        SslChoice (resultValue);

                    oChoiceEnd:
                        SslFailure (fSemanticChoiceFailed);

                    oSetParameter:
                        begin
                            parameterValue := sslTable[sslPointer];
                            sslPointer := sslPointer + 1
                        end;

                    oSetResult:
                        begin
                            resultValue := sslTable[sslPointer];
                            sslPointer := sslPointer + 1
                        end;


                    { ****
                      *  *  Memory Mechanism Operations
                      **** }

                    oMemoryLoadCode:
                        MemoryLoadCode;

                    oMemoryFetchInstruction:
                        MDR := codeMemory[MAR];

                    oMemoryFetchOperand:
                        MDR := codeMemory[MAR];

                    oMemoryFetch:
                        MDR := dataMemory[MAR];

                    oMemoryStore:
                        dataMemory[MAR] := MDR;


                    { ****
                      *  *  ALU Mechanism Operations
                      **** }

                    oALUpop:
                        ALUpop (i);

                    oALUpushTrap:
                        ALUpush (parameterValue);

                    oALUpushL:
                        ALUpush (L);
                        
                    oALUpushR:
                        ALUpush (R);
                        
                    oALUpopL:
                        ALUpop (L);

                    oALUpopR:
                        ALUpop (R);

                    oALUchooseR:
                        resultValue := R;

                    oALUpushLplusR:
                        ALUpush (L + R);

                    oALUpushLminusR:
                        ALUpush (L - R);

                    oALUpushLtimesR:
                        ALUpush (L * R);

                    oALUpushLdivR:
                        ALUpush (L div R);

                    oALUpushLmodR:
                        ALUpush (L mod R);

                    oALUpushLeqR:
                        if L = R then
                            ALUpush (bTRUE)
                        else
                            ALUpush (bFALSE);
                            
                    oALUpushLneR:
                        if L <> R then
                            ALUpush (bTRUE)
                        else
                            ALUpush (bFALSE);
                            
                    oALUpushLgtR:
                        if L > R then
                            ALUpush (bTRUE)
                        else
                            ALUpush (bFALSE);
                            
                    oALUpushLgeR:
                        if L >= R then
                            ALUpush (bTRUE)
                        else
                            ALUpush (bFALSE);
                            
                    oALUpushLltR:
                        if L < R then
                            ALUpush (bTRUE)
                        else
                            ALUpush (bFALSE);
                            
                    oALUpushLleR:
                        if L <= R then
                            ALUpush (bTRUE)
                        else
                            ALUpush (bFALSE);
                            
                    oALUpushLandR:
                        if (L = bTRUE) and (R = bTRUE) then
                            ALUpush (bTRUE)
                        else
                            ALUpush (bFALSE);

                    oALUpushLorR:
                        if (L = bTRUE) or (R = bTRUE) then
                            ALUpush (bTRUE)
                        else
                            ALUpush (bFALSE);

                    oALUpushNotR:
                        if R = bTRUE then
                            ALUpush (bFALSE)
                        else
                            ALUpush (bTRUE);

                    oALUpushNegateR:
                        ALUpush (-R);

                    oALUpushChrR:
                        ALUpush (ord (chr (R)));

                    oALUpushOrdR:
                        ALUpush (ord (chr (R)));


                    { ****
                      *  *  CU Mechanism Operations
                      **** }

                    oCUchooseInstruction:
                        resultValue := IR;

                    oCUzeroPC:
                        PC := 0;

                    oCUmoveMDRtoL:
                        L := MDR;

                    oCUmoveMDRtoR:
                        R := MDR;

                    oCUmoveMDRtoT:
                        T := MDR;

                    oCUmoveMDRtoZ:
                        Z := MDR;

                    oCUmoveMDRtoIR:
                        IR := MDR;

                    oCUmoveMDRtoPC:
                        { Fix bug in tCode }
                        if MDR = 0 then
                            PC := PC + 1
                        else
                            PC := MDR;

                    oCUmoveMDRtoSCR:
                        SCR := MDR;

                    oCUmoveLtoMDR:
                        MDR := L;

                    oCUmoveRtoMAR:
                        MAR := R;

                    oCUmovePCtoMAR:
                        MAR := PC;

                    oCUmoveMARtoPC:
                        PC := MAR;

                    oCUincPC:
                        PC := PC + 1;

                    oCUpushPC:
                        CUreturnPush (PC);

                    oCUpopPC:
                        CUreturnPop (PC);

                    oCUcase:
                        CUcase;

                    oCUsubscriptCheck:
                        CUsubscriptCheck;

                    { ****
                      *  *  Trap Handler Mechanism Operations
                      **** }

                    oTrapHandlerTrap:
                        begin
                            TrapHandlerTrap (T);

                            if T = trHalt then
                                resultValue := bTRUE
                            else
                                resultValue := bFALSE;
                        end;

                end { case operation };

            until not processing;

            if not sslabort then
                Assert (eof (tCode), assert25);

        end; { Interpret }


    procedure Finalize;
        begin
            { If the table walker terminated normally check that the state
              of the semantic mechanisms is legal.                       }
            if not sslabort then
                { If everything happened legitimately, the stacks should be empty }
                begin
                    Assert (expnSP = 0, assert26);
                    Assert (returnSP = 0, assert27);
                end;

        end { Finalize };

    begin
        { N.B. We assume here that the invoker of the PTAM (e.g. the ptc command) 
          has insured that the token stream emitted by the semantic pass is valid 
          (i.e. no semantic errors detected).  If the stream is illegal the first word 
          will be a positive integer value. }

        Initialize;
        Interpret;
        Finalize;
    end.
