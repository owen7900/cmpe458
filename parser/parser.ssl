%  PT Parser Version 5.1
%
% Date:  30 Jun 1980
%        (Revised v5.1 - 8 Feb 2021)
%
% Author:  Alan Rosselet
%
% Abstract
%     This module parses the syntax token stream emitted by the scanner
%     and emits a postfix stream of tokens to the semantic analyzer
%     module.  The parser detects and repairs syntax errors so that the
%     token stream emitted to the semantic analyzer is syntactically
%     legal (except for the special case of declaration phase errors - 
%     see the comment in the Block routine below).

Input :
        % Keywords must be first both here and in stdIdentifiers,
        % and they must appear in the exact same order

        pDiv                    'div'
        firstKeywordToken = pDiv
        pMod                    'mod'
        pOr                     'or'
        pAnd                    'and'
      % pNot                    'not' % REMOVED
        pThen                   'then' 
        pElse                   'else'
        pOf                     'of'
        pEnd                    'end'
      % pUntil                  'until' % REMOVED
        pDo                     'do'
        pArray                  'array'
        pFile                   'file'
      % pProgram                'program' % REMOVED
      % pConst                  'const' % REMOVED
        pVar                    'var'
        pType                   'type'
      % pProcedure              'procedure' % REMOVED
      % pBegin                  'begin' % REMOVED
        pIf                     'if'
        pElsIf                  'elsif' % ADDED
        pUnless                 'unless' % ADDED
        pCase                   'case'
        pWhile                  'while'
        pBreak                  'break' % ADDED
        pModule                 'module' % ADDED
        pUsing                  'using' % ADDED
        pVal                    'val' % ADDED
        pWhen                   'when' % ADDED
        pDef                    'def' % ADDED
      % pRepeat                 'repeat' % REMOVED
        lastKeywordToken = pDef % CHANGED

        % Scanner tokens -
        %   These are the tokens actually recognized by the Scanner itself.

        % Compound tokens - 
        %   These will be sent to the parser with a value or index.
        pIdentifier 
        firstCompoundInputToken = pIdentifier
        pInteger
        pStringLiteral
        lastCompoundInputToken = pStringLiteral

        % Non-compound tokens - 
        %   These tokens simply represent themselves.
        pNewLine
        pEndFile
        pPlus                   '+'
        pMinus                  '-'
        pStar                   '*'
        pAssignment             '=' % CHANGED
        pDot                    '.'
        pComma                  ','
        pSemicolon              ';'
        pColon                  ':'
        pEquals                 '==' % CHANGED
        pNotEqual               '!=' % CHANGED
        pLess                   '<'
        pLessEqual              '<='
        pGreaterEqual           '>='
        pGreater                '>'
        pLeftParen              '('
        pRightParen             ')'
        pLeftBracket            '['
        pRightBracket           ']'
        pLeftBrace              '{' % ADDED
        pRightBrace             '}' % ADDED
        pSubStr                 '$' % ADDED
        pStrLen                 '#' % ADDED
        pStrIdx                 '?' % ADDED
        pNot                    '!' % ADDED
        pDotDot                 '..'
        lastSyntaxToken = pDotDot;

Output :
        sIdentifier 
        firstSemanticToken = sIdentifier
        firstCompoundSemanticToken = sIdentifier
        sInteger
        sStringLiteral
        lastCompoundSemanticToken = sStringLiteral

        sProgram
        sParmBegin
        sParmEnd
        sConst
        sType
        sVar
        sProcedure
        sPublic  % ADDED
        sModule  % ADDED
        sBegin
        sEnd
        sNegate
        sArray
        sFile
        sRange
        sCaseStmt
        sCaseEnd
        sLabelEnd
        sExpnEnd
        sNullStmt
        sAssignmentStmt
        sSubscript
        sCallStmt
        sFieldWidth
        sIfStmt
        sThen
        sElse
        sWhileStmt
      % sRepeatStmt % REMOVED
      % sRepeatEnd % REMOVED
        sDoStmt % ADDED
        sBreakIf % ADDED
        sEq
        sNE
        sLT
        sLE
        sGT
        sGE
        sAdd
        sSubtract
        sMultiply
        sDivide
        sModulus
        sInfixOr
        sOr
        sInfixAnd
        sAnd
        sNot
        sSubstring % ADDED
        sLength % ADDED
        sIndex % ADDED
        sNewLine
        sEndOfFile
        lastSemanticToken = sEndOfFile;


rules

Program :
        'using'  .sProgram
        % program name
      % pIdentifier % REMOVED
        % program parameters
      % '(' % REMOVED
        {
            pIdentifier  .sIdentifier
            [
                | ',':
                | *:
                    >
            ]
        }
      % ')' % REMOVED
        .sParmEnd
        @Block; % CHANGED

Block :
        % Strictly speaking, standard Pascal requires that declarations
        % appear only in the order consts, types, vars, procedures.
        % We allow arbitrary intermixing of these instead to preserve
        % programmer sanity.
        .sBegin % ADDED
        {[
            | 'val': % CHANGED
                .sConst
                @ConstantDefinitions
            | 'type':
                .sType
                @TypeDefinitions
            | 'var':
                .sVar
                @VariableDeclarations
            | 'def': % CHANGED
                .sProcedure
                % procedure name
                [ % ADDED CHOICE
                    | '*':
                        pIdentifier  .sIdentifier  .sPublic
                    | *:
                        pIdentifier  .sIdentifier
                ]
              % pIdentifier  .sIdentifier % REMOVED
                @ProcedureHeading
                @Block 'end'  % CHANGED
            | 'module': % ADDED CHOICE OPTION
                .sModule
                pIdentifier  .sIdentifier
                @Block  'end' 
            | pIdentifier: % ADDED CHOICE OPTION
                @AssignmentOrCallStmt
            | 'if': % ADDED CHOICE OPTION
                @IfStmt
            | 'unless': % ADDED CHOICE OPTION
                @Unless
            | 'while': % ADDED CHOICE OPTION
                @WhileStmt
            | 'case': % ADDED CHOICE OPTION
                @CaseStmt
            | 'do': % ADDED CHOICE OPTION
                @DoStmt
            | ';': % ADDED CHOICE OPTION (null statement)
                .sNullStmt
            | *:
                >
        ]}
        .sEnd; % ADDED
      % 'begin' % REMOVED
      % @BeginStmt; % REMOVED

ConstantDefinitions :
        % Accept one or more named constant definitions
        pIdentifier  .sIdentifier
        '=' @ConstantValue; % CHANGED
        % {[ % REMOVED LOOP
        %     | pIdentifier:
        %         .sIdentifier
        %         '=' @ConstantValue ';'
        %     | *:
        %         >
        % ]};

ConstantValue :
        [
            | pInteger:
                .sInteger
            | pIdentifier:
                .sIdentifier
            | '-':
                @UnsignedIntegerConstant
                .sNegate
            | '+':
                @UnsignedIntegerConstant
            | pStringLiteral:
                .sStringLiteral
        ];

UnsignedIntegerConstant :
        [
            | pIdentifier:
                .sIdentifier
            | pInteger:
                .sInteger
        ];

TypeDefinitions :
        % Accept one or more named type definitions.
        pIdentifier  .sIdentifier
        ':'  @TypeBody; % CHANGED
        % {[ % REMOVED LOOP
        %     | pIdentifier:
        %         .sIdentifier
        %         '='  @TypeBody  ';'
        %     | *:
        %         >
        % ]};

TypeBody :
        [
            | 'array':
                .sArray
                '['  @SimpleType  ']'
                'of'  @SimpleType
            | 'file':
                .sFile
                'of'  @SimpleType
            | *:
                @SimpleType
        ];

SimpleType :
        % A simple type is a named type (possibly predefined)
        % or a subrange type specification
        [
            | pIdentifier:
                .sIdentifier
                [
                    | '..':
                        .sRange         %% this may be unnecessary
                        @OptionallySignedIntegerConstant
                    | *:
                ]
            | *:
                @OptionallySignedIntegerConstant
                '..'  .sRange
                @OptionallySignedIntegerConstant
        ];

OptionallySignedIntegerConstant :
        [
            | '-':
                @UnsignedIntegerConstant
                .sNegate
            | '+':
                @UnsignedIntegerConstant
            | *:
                @UnsignedIntegerConstant
        ];

VariableDeclarations :
        % Accept one or more variable declarations.
        pIdentifier  .sIdentifier
        {[ % ADDED LOOP
            | ',':
                .sVar  pIdentifier  .sIdentifier
            | *:
                >
        ]}
        ':'  @TypeBody; % ADDED
        % ':'  @TypeBody  ';' % REMOVED
        % {[ % REMOVED LOOP
        %     | pIdentifier:
        %         .sIdentifier
        %         ':'  @TypeBody  ';'
        %     | *:
        %         >
        % ]};

ProcedureHeading :
        % Accept zero or more procedure formal parameter declarations.
        '(' % ADDED
        [ % ADDED CHOICE
            | ')':
            | *:
                {
                    % formal parameter identifier
                    [
                        | 'var':
                            pIdentifier  .sIdentifier
                            .sVar
                        | *:
                            pIdentifier  .sIdentifier
                    ]
                    ':'
                    % type identifier
                    pIdentifier  .sIdentifier
                    [
                        | ',':
                        | *:
                            >
                    ]
                }
                ')'
        ]
        % [ % REMOVED CHOICE
        %     | '(':
        %         {
        %             % formal parameter identifier
        %             [
        %                 | 'var':
        %                     pIdentifier  .sIdentifier
        %                     .sVar
        %                 | *:
        %                     pIdentifier  .sIdentifier
        %             ]
        %             ':'
        %             % type identifier
        %             pIdentifier  .sIdentifier
        %             [
        %                 | ';':
        %                 | *:
        %                     >
        %             ]
        %         }
        %         ')'
        %     | *:
        % ]
        % ';' % REMOVED
        .sParmEnd;

% Statement : % REMOVED RULE
%         [
%             | pIdentifier:
%                 @AssignmentOrCallStmt
%             | 'begin':
%                 @BeginStmt
%             | 'if':
%                 @IfStmt
%             | 'while':
%                 @WhileStmt
%             | 'case':
%                 @CaseStmt
%             | 'repeat':
%                 @RepeatStmt
%             | *:
%                 .sNullStmt
%         ];

AssignmentOrCallStmt :
        [
            | '=': % CHANGED
                .sAssignmentStmt
                .sIdentifier    % identifier accepted in the Statement rule
                @Expression
                .sExpnEnd
            | '[':
                .sAssignmentStmt
                .sIdentifier
                .sSubscript
                @Expression
                .sExpnEnd
                ']'  '=' % CHANGED
                @Expression
                .sExpnEnd
            | *:
                @CallStmt
        ];

CallStmt :
        .sCallStmt
        .sIdentifier    % procedure identifier accepted in the Statement rule
        % accept zero or more actual parameters
        [
            | '(':
                {
                    @Expression
                    .sExpnEnd
                    % allow a field width specification to occur in calls
                    % to the standard procedures write and writeln
                    [
                        | ':':
                            .sFieldWidth
                            @Expression
                            .sExpnEnd
                        | *:
                    ]
                    [
                        | ',':
                        | *:
                            >
                    ]
                }
                ')'
            | *:        % no actual parameters
        ]
        .sParmEnd;

% BeginStmt : % REMOVED RULE
%         .sBegin
%         {
%             @Statement
%             [
%                 | ';':
%                 | 'end':
%                     .sEnd
%                     >
%             ]
%         };

IfStmt :
        .sIfStmt
        @Expression
        .sExpnEnd
        'then'  .sThen
        @Block % CHANGED
        [
            |'elsif':  % ADDED
                .sElse
                .sBegin
                @IfStmt
                .sEnd
            | 'else':
                .sElse
                @Block % CHANGED
            | *:
        ]
        'end' ;   % ADDED

Unless :                    % ADDED RULE
        .sIfStmt
        @Expression
        .sNot
        .sExpnEnd
        'then'  .sThen
        @Block
        [
            | 'else':
                .sElse
                @Block
            | *:
        ]
        'end';

CaseStmt :
        .sCaseStmt
        @Expression
        .sExpnEnd
        %'of'           % REMOVED
        % @CaseAlternative % REMOVED
        {[ % ADDED LOOP
            | 'when':
                @CaseAlternative
            | *:
                >
        ]}
        [ % ADDED CHOICE
            | 'else':
                .sElse  @Block
            | *:
        ]
        % {[ % REMOVED LOOP
        %     | ';':
        %         % since case alternatives cannot be null, allow
        %         % for the common situation of an extra semicolon
        %         % at the end of the list of case alternatives.
        %         [
        %             | 'end':
        %                 >
        %             | *:
        %                 @CaseAlternative
        %         ]
        %     | 'end':
        %         >
        % ]}
        'end' % ADDED
        .sCaseEnd;

CaseAlternative :
        % A case alternative is a statement labelled by
        % one or more optionally signed integer constants
        {
            @OptionallySignedIntegerConstant
            [
                | ',':
                | *:
                    >
            ]
        }
        'then'  % ADDED
        %.sLabelEnd  % REMOVED
        @Block; % CHANGED

WhileStmt :
        .sWhileStmt
        @Expression
        .sExpnEnd
        'do'
        @Block 'end' ; % CHANGED

% RepeatStmt : % REMOVED RULE
%         .sRepeatStmt
%         {
%             @Statement
%             [
%                 | ';':
%                 | 'until':
%                     .sRepeatEnd
%                     >
%             ]
%         }
%         @Expression
%         .sExpnEnd;

DoStmt : % ADDED RULE
        .sDoStmt
        @Block
        'break' 'if' .sBreakIf @Expression .sExpnEnd
        @Block
        'end' ;

Expression :
        @SimpleExpression
        [
            | '==': % CHANGED
                @SimpleExpression  .sEq
            | '!=': % CHANGED
                @SimpleExpression  .sNE
            | '<':
                @SimpleExpression  .sLT
            | '<=':
                @SimpleExpression  .sLE
            | '>':
                @SimpleExpression  .sGT
            | '>=':
                @SimpleExpression  .sGE
            | *:
        ];

SimpleExpression :
        [
            | '+':
                @Term
            | '-':
                @Term  .sNegate
            | *:
                @Term
        ]
        {[
            | '+':
                @Term  .sAdd
            | '-':
                @Term  .sSubtract
            | 'or':
                .sInfixOr  @Term  .sOr
            | *:
                >
        ]};

Term :
        @Subfactor % CHANGED
        {[
            | '*':
                @Subfactor  .sMultiply % CHANGED
            | 'div':
                @Subfactor  .sDivide % CHANGED
            | 'mod':
                @Subfactor  .sModulus % CHANGED
            | 'and':
                .sInfixAnd  @Subfactor  .sAnd % CHANGED
            | '?': % ADDED CHOICE OPTION
                @Subfactor  .sIndex
            | *:
                >
        ]};

Subfactor : % ADDED RULE
        @Factor
        {[
            | '$':
                @Factor  '..'  @Factor  .sSubstring
            | *:
                >
        ]};

Factor :
        [
            | pIdentifier:
                .sIdentifier
                @IdentifierExtension
            | pInteger:
                .sInteger
            | '(':
                @Expression  ')'
            | '!': % CHANGED
                @Factor
                .sNot
            | '#': % ADDED CHOICE OPTION
                @Factor
                .sLength
            | pStringLiteral:
                .sStringLiteral
            | 'file':
                .sFile '(' @Expression ')'
                .sExpnEnd
        ];

IdentifierExtension :
        % Handle subscripts and function actual parameter lists
        [
            | '[':
                .sSubscript
                @Expression  ']'
                .sExpnEnd
            | '(':
                .sParmBegin
                @Expression  ')'
                .sExpnEnd
                .sParmEnd
            | *:
        ];

end
